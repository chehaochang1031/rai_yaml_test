# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]



jobs:
  apk:
    name: Generate APK
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2  # 拉取原始碼

      - name: set up JDK 1.8 # 設定JDK
        uses: actions/setup-java@v2
        with:
          java-version: 8.0.232+9.1
          distribution: 'adopt'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle # 執行編譯命令
        run: ./gradlew clean && ./gradlew app:assembleDebug

      - name: Prepare Release
        id: prepare_release
        run: |
          APK_PATH=`find . -name '*.apk' | grep debug`
          echo ::set-output name=apk_path::$APK_PATH
          APK_NAME=`basename $APK_PATH`
          echo ::set-output name=apk_name::$APK_NAME

      - name: Upload File to FTP
        run: curl -F ${{steps.prepare_release.outputs.apk_path}} ftp://david:a123321a@ftpweb.intemotech.com/mrt_upload/

#      - name: Upload APK
#        uses: actions/upload-artifact@v2
#        with:
#          name: app-debug.apk
#          path: app/build/outputs/apk/debug/
#

#  deploy:
#    needs: apk
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Download Artifact
#        uses: actions/download-artifact@master
#        with:
#          name: app-debug.apk
#          path: app/build/outputs/apk/debug/
#      - name: Upload File to FTP
#        run: curl -F "file=@/app/build/outputs/apk/debug/app-debug.apk" ftp://david:a123321a@ftpweb.intemotech.com/mrt_upload/

